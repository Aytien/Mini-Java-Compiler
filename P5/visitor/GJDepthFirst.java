//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;

import java.awt.Stroke;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */


public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //

	String destReg;
	int inArgs, outArgs,cur_fn_mcc=0,cur_fn_ac=0;
	boolean printLabel,is_int=false,is_mov=false,is_label=false,is_hal=false;
   int count_args,stack_space,max_cargs;
	public void print_halloc()
   {
         System.out.println("\t.text");
         System.out.println("\t.globl\t_halloc");
         System.out.println("_halloc:");
         System.out.println("\tli $v0, 9");
         System.out.println("\tsyscall");
         System.out.println("\tj $ra");
         System.out.println();
   }
   public void print_printer()
   {
         System.out.println("\t.text");
         System.out.println("\t.globl\t_print");
         System.out.println("_print:");
         System.out.println("\tli $v0, 1");
         System.out.println("\tsyscall");
         System.out.println("\tla $a0, newl");
         System.out.println("\tli $v0, 4");
         System.out.println("\tsyscall");
         System.out.println("\tj $ra");
         System.out.println();

   }
   public void print_newl()
   {
      System.out.println("\t.data");
      System.out.println("\t.align\t0");
      System.out.println("newl:\t.asciiz\t\"\\n\"");
      System.out.println();
   }

   public void print_str_er()
   {
      System.out.println("\t.data");
      System.out.println("\t.align\t0");
      System.out.println("str_er:\t.asciiz\t\" ERROR: abnormal termination\\n\"");
      System.out.println();
   }

   public void init_fn(int stack_space)
   {
      System.out.println("move $fp, $sp");
      System.out.println("sw $fp, -8($sp)");
      System.out.println("sw $ra, -4($sp)");
      System.out.println("subu $sp, $sp, "+stack_space);
   }

   public void clos_fn(int stack_space)
   {
      System.out.println("addu $sp, $sp, "+stack_space);
      System.out.println("lw $ra, -4($sp)");
      System.out.println("lw $fp, -8($sp)");
      System.out.println("jr $ra");
   }

   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return (R)n.tokenImage; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( SpillInfo() )?
    * f13 -> ( Procedure() )*
    * f14 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;

      System.out.println("\t.text");
      System.out.println("\t.globl        main");
      System.out.println("main:");


      n.f0.accept(this, argu);

      n.f1.accept(this, argu);
      count_args=Integer.parseInt(n.f2.accept(this, argu).toString());
      n.f3.accept(this, argu);

      n.f4.accept(this, argu);
      stack_space=Integer.parseInt(n.f5.accept(this, argu).toString());
      n.f6.accept(this, argu);

      n.f7.accept(this, argu);
      max_cargs=Integer.parseInt(n.f8.accept(this, argu).toString());
      n.f9.accept(this, argu);
      cur_fn_mcc=max_cargs;
      int ss=0;
      if(max_cargs>4)
      {
         ss=4*(stack_space+max_cargs-2);
      }
      else
      {
         ss=4*(stack_space+2);
      }
      cur_fn_ac=count_args;
      // System.out.println("Stack_space:"+stack_space);
      // System.out.println("ss:"+ss);
      // System.out.println("maxcargs:"+max_cargs);

      init_fn(ss);
      n.f10.accept(this, argu);
      clos_fn(ss);


      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);

      print_halloc();
      print_printer();
      print_newl();
      print_str_er();

      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret=null;
      printLabel = true;
      n.f0.accept(this, argu);
      printLabel = false;
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( SpillInfo() )?
    */
   public R visit(Procedure n, A argu) {
      R _ret=null;



      String fn_name=n.f0.accept(this, argu).toString();
      System.out.println("\t.text");
      System.out.println("\t.globl\t"+fn_name);
      System.out.println(fn_name+":");

      n.f1.accept(this, argu);
      count_args=Integer.parseInt(n.f2.accept(this, argu).toString());
      n.f3.accept(this, argu);

      n.f4.accept(this, argu);
      stack_space=Integer.parseInt(n.f5.accept(this, argu).toString());
      n.f6.accept(this, argu);

      n.f7.accept(this, argu);
      max_cargs=Integer.parseInt(n.f8.accept(this, argu).toString());
      n.f9.accept(this, argu);
      cur_fn_mcc=max_cargs;
      int ss=0;
      if(max_cargs>4)
      {
         ss=4*(stack_space+max_cargs-2);
      }
      else
      {
         ss=4*(stack_space+2);
      }
      // System.out.println("Stack_space:"+stack_space);
      // System.out.println("ss:"+ss);
      // System.out.println("maxcargs:"+max_cargs);
      cur_fn_ac=count_args;
      init_fn(ss);
      n.f10.accept(this, argu);
      clos_fn(ss);

      n.f11.accept(this, argu);
      n.f12.accept(this, argu);


      return _ret;
   }

   /**
    * f0 -> NoOpStmt()//
    *       | ErrorStmt()//
    *       | CJumpStmt()//
    *       | JumpStmt()//
    *       | HStoreStmt()//
    *       | HLoadStmt()//
    *       | MoveStmt()//
    *       | PrintStmt()//
    *       | ALoadStmt()//
    *       | AStoreStmt()//
    *       | PassArgStmt()//
    *       | CallStmt()//
    */
   public R visit(Stmt n, A argu) {
      R _ret=null;
      printLabel = false;
      n.f0.accept(this, argu);
      printLabel = true;
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println("nop");
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println("jal str_er");
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Reg()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String reg=n.f1.accept(this, argu).toString();
      String lab=n.f2.accept(this, argu).toString();
      System.out.println("beqz "+reg+" "+lab);
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String lab=n.f1.accept(this, argu).toString();
      System.out.println("b "+lab);
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Reg()
    * f2 -> IntegerLiteral()
    * f3 -> Reg()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String reg1=n.f1.accept(this, argu).toString();
      String off=n.f2.accept(this, argu).toString();
      String reg2=n.f3.accept(this, argu).toString();
      System.out.println("sw "+reg2+", "+off+"("+reg1+")");
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Reg()
    * f2 -> Reg()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String reg1=n.f1.accept(this, argu).toString();
      String reg2=n.f2.accept(this, argu).toString();
      String off=n.f3.accept(this, argu).toString();

      System.out.println("lw "+reg1+", "+off+"("+reg2+")");

      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Reg()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      argu=(A)n.f1.accept(this, argu);
      is_mov=true;
      n.f2.accept(this, argu);
      is_mov=false;
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      is_hal=true;
      String tbp=n.f1.accept(this, argu).toString();
      is_hal=false;
      if(tbp.charAt(0)!=('$'))
      {
         System.out.println("li $a0 "+tbp);
      }
      else
      System.out.println("move $a0, "+tbp);
      System.out.println("jal _print");
      return _ret;
   }

   /**
    * f0 -> "ALOAD"
    * f1 -> Reg()
    * f2 -> SpilledArg()
    */
   public R visit(ALoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String reg=n.f1.accept(this, argu).toString();
      int st_off=Integer.parseInt(n.f2.accept(this, argu).toString());
      if(cur_fn_ac>4 && st_off<cur_fn_ac-4)
      {
         System.out.println("lw "+reg+", "+st_off*4+"($fp)");
      }
      else
      {
         if(cur_fn_mcc>4)
         st_off+=cur_fn_mcc-4;
         System.out.println("lw "+reg+", "+4*st_off+"($sp)");
      }


      return _ret;
   }

   /**
    * f0 -> "ASTORE"
    * f1 -> SpilledArg()
    * f2 -> Reg()
    */
   public R visit(AStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      int st_off=Integer.parseInt(n.f1.accept(this, argu).toString());
      String reg=n.f2.accept(this, argu).toString();
      if(cur_fn_ac>4 && st_off<cur_fn_ac-4)
      {
         System.out.println("sw "+reg+", "+st_off*4+"($fp)");
      }
      else
      {
         if(cur_fn_mcc>4)
         st_off+=cur_fn_mcc-4;
         System.out.println("sw "+reg+", "+4*st_off+"($sp)");
      }
      return _ret;
   }

   /**
    * f0 -> "PASSARG"
    * f1 -> IntegerLiteral()
    * f2 -> Reg()
    */
   public R visit(PassArgStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      int off=Integer.parseInt(n.f1.accept(this, argu).toString());
      String reg=n.f2.accept(this, argu).toString();
      off=4*(off-1);
      System.out.println("sw "+reg+", "+off+"($sp)");


      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    */
   public R visit(CallStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String addr=n.f1.accept(this, argu).toString();
      System.out.println("jalr "+addr);
      return _ret;
   }

   /**
    * f0 -> HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);

      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      is_mov=false;
      is_hal=true;
      R amt=n.f1.accept(this, null);
      is_hal=false;
      is_mov=true;
      if(is_int)
      {
         System.out.println("li $a0 "+amt);
         is_int=false;
      }
      else
      {
         System.out.println("move $a0, "+amt);
      }

      System.out.println("jal _halloc");
      System.out.println("move "+argu+", $v0");
      return _ret=(R)argu;
   }

   /**
    * f0 -> Operator()
    * f1 -> Reg()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n, A argu) {
      R _ret=null;
      String opr=n.f0.accept(this, argu).toString();
      String op1=n.f1.accept(this, argu).toString();
      is_mov=false;
      String op2=n.f2.accept(this, null).toString();
      is_mov=true;
      if(op2.charAt(0)!='$')
      {
         if(opr.equals("add") || opr.equals("slt"))
         {
            opr=opr+"i";
         }
         is_int=false;
      }

      System.out.println(opr+" "+argu+", "+op1+", "+op2);


      return _ret=(R)argu;
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n, A argu) {
      R _ret=null;
      String op=n.f0.accept(this, argu).toString();

      if(op.equals("LE"))
      {
         _ret=(R)("sle");
      }
      else if(op.equals("NE"))
      {
         _ret=(R)("sne");
      }
      else if(op.equals("PLUS"))
      {
         _ret=(R)("add");
      }
      else if(op.equals("MINUS"))
      {
         _ret=(R)("sub");
      }
      else if(op.equals("TIMES"))
      {
         _ret=(R)("mul");
      }
      else if(op.equals("DIV"))
      {
         _ret=(R)("div");
      }
      return _ret;


   }

   /**
    * f0 -> "SPILLEDARG"
    * f1 -> IntegerLiteral()
    */
   public R visit(SpilledArg n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret=n.f1.accept(this,argu);
      return _ret;

   }

   /**
    * f0 -> Reg()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n, A argu) {
      R _ret=null;

      _ret=n.f0.accept(this, argu);
      if(is_mov)
      {
         if(is_int)
         {
            System.out.println("li "+argu+", "+_ret);
            is_int=false;
         }
         else if(is_label)
         {
            System.out.println("la "+argu+", "+_ret);
            is_label=false;
         }
         else
         {
            System.out.println("move "+argu+", "+_ret);
         }

      }

      return _ret;
   }

   /**
    * f0 -> "a0"
    *       | "a1"
    *       | "a2"
    *       | "a3"
    *       | "t0"
    *       | "t1"
    *       | "t2"
    *       | "t3"
    *       | "t4"
    *       | "t5"
    *       | "t6"
    *       | "t7"
    *       | "s0"
    *       | "s1"
    *       | "s2"
    *       | "s3"
    *       | "s4"
    *       | "s5"
    *       | "s6"
    *       | "s7"
    *       | "t8"
    *       | "t9"
    *       | "v0"
    *       | "v1"
    */
   public R visit(Reg n, A argu) {
      R _ret=null;
      _ret=(R)("$"+n.f0.accept(this, argu).toString());

      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;

      _ret=n.f0.accept(this, argu);
      if(is_mov||is_hal)
      is_int=true;
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      R _ret=null;
      if(is_mov)
      is_label=true;
      _ret=n.f0.accept(this, argu);
      if(printLabel)
      System.out.println(_ret+":");
      return _ret;

   }

   /**
    * f0 -> "//"
    * f1 -> SpillStatus()
    */
   public R visit(SpillInfo n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <SPILLED>
    *       | <NOTSPILLED>
    */
   public R visit(SpillStatus n, A argu) {
      R _ret=null;
      _ret=n.f0.accept(this, argu);
      return _ret;
   }

}


