//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;

import java.text.NumberFormat.Style;
import java.util.*;



/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //

   int pass=0;
   int cur_args_count=0;
   boolean is_fn_label=false,is_gen_label=false,is_call=false,is_defined=false,is_jump=false,reg_v=false,tb_stored=false,store_spilled,debug=false;
   HashMap<String,fn_info> fn_list = new HashMap<>();
   HashMap<String,Integer> fn_label_list = new HashMap<>();
   int block_count=0;
   fn_info new_fn= new fn_info();
   block_info new_block = new block_info();

   public void add_jumps()
   {
      for(int i=0;i<new_fn.blocks.size();i++)
      {
         block_info cur_block=new_fn.blocks.get(i);
         for(int j=0;j<cur_block.label_jumps.size();j++)
         {
            int jump_addr = new_fn.label_map.get(cur_block.label_jumps.get(j));
            cur_block.children.add(jump_addr);
         }
      }
   }

   public void liveness_analysis()
   {
      for(Map.Entry<String,fn_info> itr: fn_list.entrySet())
      {
         String cur_fn_name=itr.getKey();
         fn_info cur_fn=itr.getValue();

         boolean passed=false;
         while(!passed)
         {
            passed=true;
            for(int i = cur_fn.blocks.size()-1;i>=0;i--)
            {
               block_info cur_block = cur_fn.blocks.get(i);

               HashSet<Integer> old_in = new HashSet<>(cur_block.in);
               cur_block.in.clear();
               HashSet<Integer> old_out = new HashSet<>(cur_block.out);
               HashSet<Integer> out_def = new HashSet<>(cur_block.out);


               out_def.removeAll(cur_block.defined);

               cur_block.in.addAll(out_def);
               cur_block.in.addAll(cur_block.used);

			   if(!cur_block.in.equals(old_in))
			   {
				passed=false;
			   }

			    cur_block.out.clear();

               for(int j=0; j<cur_block.children.size();j++)
               {
                  block_info child = cur_fn.blocks.get(cur_block.children.get(j));
                  cur_block.out.addAll(child.in);
               }

               if(!cur_block.out.equals(old_out))
               {
                  passed=false;
               }

            }
         }
      }
   }

   public void assign_lives()
   {
      for(Map.Entry<String,fn_info> itr: fn_list.entrySet())
      {
         String cur_fn_name=itr.getKey();
         fn_info cur_fn=itr.getValue();
         if(cur_fn.blocks.size()==0)
         continue;

         for(Integer in : cur_fn.blocks.get(0).in)
         {
			tmp_info new_tmp= new tmp_info(0,0,in,cur_fn.ios_tmps.size());
			cur_fn.ios_tmps.add(in);
			cur_fn.tmps.put(in, new_tmp);
         }

         for(int i=0;i<cur_fn.blocks.size();i++)
         {
            block_info cur_block=cur_fn.blocks.get(i);

            for(Integer defined : cur_block.defined)
            {
               if(!cur_fn.tmps.containsKey(defined))
               {
                  tmp_info new_tmp= new tmp_info(i,i,defined,cur_fn.ios_tmps.size());
                  cur_fn.ios_tmps.add(defined);
                  cur_fn.tmps.put(defined, new_tmp);
               }
            }

            for(Integer out : cur_block.out)
            {
               if(!cur_fn.tmps.containsKey(out))
               {
                  tmp_info new_tmp= new tmp_info(i,i,out,cur_fn.ios_tmps.size());
                  cur_fn.ios_tmps.add(out);
                  cur_fn.tmps.put(out, new_tmp);
               }
            }

            for(Integer in : cur_block.in)
            {
               cur_fn.tmps.get(in).end=i;
            }

         }

      }

   }

   public void register_allocation()
   {

      int total_reg=18;
      int[] status_reg=new int[total_reg];
      for(Map.Entry<String,fn_info> itr: fn_list.entrySet())
      {
         fn_info cur_fn=itr.getValue();
         int rem_reg=total_reg;
         ArrayList<Integer>active =new ArrayList<>();
         ArrayList<Integer>live_intervals =new ArrayList<>();
         int stack_p=0;
         for(int i=0;i<rem_reg;i++)
         status_reg[i]=-1;


         for(int i=0;i<cur_fn.ios_tmps.size();i++)
         {
            int ctv=cur_fn.ios_tmps.get(i);
            if(ctv>3&&ctv<cur_fn.args_count)
            {
               tmp_info cur_temp= cur_fn.tmps.get(ctv);
               cur_temp.is_spilled=true;
               cur_temp.register="";
               cur_temp.reg_ind=stack_p;
               cur_fn.spilled_temps.add(cur_temp.val);
               stack_p++;
            }
            else
            {
               live_intervals.add(ctv);
            }
         }
         Collections.sort(live_intervals, new sort_start(cur_fn));

         int spills=stack_p;
         for(int i=0;i<live_intervals.size();i++)
         {
            tmp_info cur_temp= cur_fn.tmps.get(live_intervals.get(i));
            // System.out.print("TEMP "+ cur_temp.val);
            // System.out.print("Start:"+cur_temp.start);
            // System.out.println("End:"+cur_temp.end);

            //Expire old intervals
            // for(int j=0;j<active.size();j++)
            // {
            //    tmp_info c_tmp=cur_fn.tmps.get(active.get(j));
            //    System.out.println(c_tmp.start+" "+c_tmp.end);
            // }
			if(cur_temp.end==cur_temp.start)
			{
				cur_temp.is_spilled=false;
				cur_temp.register="v";
				cur_temp.reg_ind=0;
				continue;
			}
            while(!active.isEmpty())
            {
               int tb_retired=active.get(0);
               tmp_info tmp_retired=cur_fn.tmps.get(tb_retired);
               // System.out.print(" "+tmp_retired.end+" "+cur_temp.start);
               if(tmp_retired.end>=cur_temp.start)
               break;
               int free_reg=0;
               if(tmp_retired.register.equals("t"))
               {
                  free_reg=8;
               }
               free_reg+=tmp_retired.reg_ind;
               status_reg[free_reg]=-1;
               // System.out.println(cur_temp.register+cur_temp.reg_ind+":"+free_reg);
               active.remove(0);
            }
            // System.out.println(" : "+active.size());
            if(active.size()<total_reg)
            {
               //allocate
               for(int j=0;j<total_reg;j++)
               {
                  if(status_reg[j]==-1)
                  {
                     if(j>=8)
                     {
                        cur_temp.register="t";
                        cur_temp.reg_ind=j-8;
                     }
                     else
                     {
                        cur_temp.register="s";
                        cur_temp.reg_ind=j;
                     }
                     status_reg[j]=cur_temp.val;
                     cur_temp.is_spilled=false;
                     active.add(cur_temp.val);
                     break;
                  }

               }

            }
            else
            {
               //spill
               // System.out.println(active.size());
               tmp_info tmp_retired=cur_fn.tmps.get(active.get(active.size()-1));

               if(tmp_retired.end>cur_temp.end)
               {
                  int swap_reg=tmp_retired.reg_ind;

                  if(tmp_retired.register.charAt(0)=='s')
                  {
                     status_reg[swap_reg]=cur_temp.val;
                     cur_temp.is_spilled=false;
                     cur_temp.register="s";
                     cur_temp.reg_ind=swap_reg;
                  }
                  else
                  {
                     status_reg[swap_reg]=cur_temp.val;
                     cur_temp.is_spilled=false;
                     cur_temp.register="t";
                     cur_temp.reg_ind=swap_reg;
                  }

                  tmp_retired.is_spilled=true;
                  tmp_retired.reg_ind=spills;
                  tmp_retired.register="";
                  cur_fn.spilled_temps.add(tmp_retired.val);
                  active.set(active.size()-1,live_intervals.get(i));
               }
               else
               {
                  cur_temp.is_spilled=true;
                  cur_temp.register="";
                  cur_temp.reg_ind=spills;
                  cur_fn.spilled_temps.add(live_intervals.get(i));
               }

               spills++;
            }
            Collections.sort(active, new sort_end(cur_fn));
         }

         stack_p+=spills;

         cur_fn.stack_space=stack_p;
         cur_fn.stack_pointer=stack_p;

         if(!cur_fn.fn_label.equals("MAIN"))
         {
            cur_fn.stack_space+=8;
         }

         if(cur_fn.call_count>0)
         {
            cur_fn.stack_space+=10;
         }


         if(cur_fn.max_args_count>4)
         {
            cur_fn.stack_space+=cur_fn.max_args_count-4;
         }
      }
   }
   public void print_all()
   {
      for(Map.Entry<String,fn_info> itr: fn_list.entrySet())
      {
         String cur_fn_name=itr.getKey();
         fn_info cur_fn=itr.getValue();
         System.out.println(cur_fn_name);

         for(int i = 0;i<cur_fn.blocks.size();i++)
         {
            block_info cur_block = cur_fn.blocks.get(i);
            System.out.println("Block Number:"+cur_block.block_number);
            System.out.println("In:"+cur_block.in);
            System.out.println("Out:"+cur_block.out);
            System.out.println("Def:"+cur_block.defined);
            System.out.println("Used:"+cur_block.used);
            System.out.println("Children:"+cur_block.children);
         }
         // for(Map.Entry<String,Integer> i: cur_fn.label_map.entrySet())
         // {
         //    System.out.println("Label: "+i.getKey()+" Address:"+i.getValue());
         // }
         // Collections.sort(cur_fn.ios_tmps,new sort_start(cur_fn));

         // for(int i=0;i<cur_fn.ios_tmps.size();i++)
         // {
         //    tmp_info cur_temp= cur_fn.tmps.get(cur_fn.ios_tmps.get(i));
         //    System.out.print("TEMP "+ cur_temp.val);
         //    System.out.print(" Start: "+cur_temp.start);
         //    System.out.println(" End: "+cur_temp.end+" Register: "+cur_temp.register+cur_temp.reg_ind);
         //    System.out.println();
         //    // System.out.println("Spilled: "+cur_temp.is_spilled);
         //    // System.out.println("Register: "+cur_temp.register+cur_temp.reg_ind);
         // }
      }
   }

   public String get_temp(int temp_val)
   {
      tmp_info cur_tmp= new_fn.tmps.get(temp_val);
      String regv;
      if(reg_v)
      regv="v1";
      else
      regv="v0";
      String ret="";
      // if(temp_val==0)
      // {
      //    for(Map.Entry<Integer,tmp_info> itr: new_fn.tmps.entrySet())
      //    {
      //       System.out.println("TEMP "+itr.getKey()+" Register"+itr.getValue().register);
      //    }
      // }
      // System.out.println(temp_val);
      if(cur_tmp.is_spilled)
      {
         if(tb_stored)
         {
            ret=("ASTORE SPILLEDARG "+cur_tmp.reg_ind+" "+regv);
            store_spilled=true;
         }
         else
         {
            System.out.println("ALOAD "+regv+" SPILLEDARG "+cur_tmp.reg_ind);
            ret=regv;
         }
      }
      else
      {
         ret=(String)(cur_tmp.register+cur_tmp.reg_ind);
      }
      return(ret);
   }

   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return (R)n.tokenImage; }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
   public R visit(Procedure n, A argu) {
      R _ret=null;
      if(pass==0)
      {
         new_fn= new fn_info();

         is_fn_label=true;
         new_fn.fn_label=n.f0.accept(this, argu).toString();
         is_fn_label=false;

         n.f1.accept(this, argu);

         new_fn.args_count=Integer.parseInt(n.f2.accept(this, argu).toString());
         block_count=0;
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);

         add_jumps();
         fn_list.put(new_fn.fn_label, new_fn);
      }
      else
      {
         is_fn_label=true;
         String fn_name=n.f0.accept(this, argu).toString();
         is_fn_label=false;
         new_fn=fn_list.get(fn_name);

         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);

         System.out.println(new_fn.fn_label+" ["+new_fn.args_count+"] ["+new_fn.stack_space+"] ["+new_fn.max_args_count+"]");
         n.f4.accept(this, argu);
      }

      return _ret;
   }

//
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;

      new_fn= new fn_info();
      new_fn.fn_label=n.f0.accept(this, argu).toString();
      new_fn.args_count=0;
      block_count=0;
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);

      add_jumps();
      fn_list.put(new_fn.fn_label, new_fn);

      n.f3.accept(this, argu);
      n.f4.accept(this, argu);

      liveness_analysis();
      assign_lives();
      register_allocation();
      // print_all();

      pass=1;

      new_fn=fn_list.get(n.f0.accept(this, argu).toString());
      System.out.println(new_fn.fn_label+" ["+new_fn.args_count+"] ["+new_fn.stack_space+"] ["+new_fn.max_args_count+"]");

      n.f1.accept(this, argu);

      System.out.println( n.f2.accept(this, argu).toString());

      if(new_fn.spilled_temps.size()>0)
      {

         System.out.println("//SPILLED");
      }
      else
      {
         if(debug)
         {
            System.out.println(new_fn.fn_label+"DONE");

            for(int i=0;i<10;i++)
            {
               System.out.println("DEbug");
            }
         }
         System.out.println("//NOTSPILLED");
      }

      System.out.println();
      n.f3.accept(this, argu);
      if(debug)
      {
         System.out.println(new_fn.fn_label+"DONE");

         for(int i=0;i<10;i++)
         {
            System.out.println("DEbug");
         }
      }
      n.f4.accept(this, argu);


      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret=null;

      n.f0.accept(this, argu);

      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret=null;
      if(pass==0)
      {
         if(!is_jump)
         {
            new_block.children.add(block_count);
         }

         new_block= new block_info();
         new_block.block_number=block_count;
         block_count++;
         is_gen_label=false;
         is_jump=false;
         n.f0.accept(this, argu);
         is_gen_label=true;
         new_fn.blocks.add(new_block);

      }
      else
      {
         is_gen_label=false;
         n.f0.accept(this, argu);
         is_gen_label=true;
      }

      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      if(pass==1)
      {
         System.out.println("NOOP");
      }
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      if(pass==1)
      {
         System.out.println("ERROR");
      }
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Temp()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
      if(pass==0)
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);

         String lab_name=n.f2.accept(this, argu).toString();
         new_block.label_jumps.add(lab_name);
      }
      else
      {
         n.f0.accept(this, argu);
         String final_reg=n.f1.accept(this, argu).toString();
         String lab_name=n.f2.accept(this, argu).toString();

         System.out.println("CJUMP "+final_reg+" "+new_fn.fn_label+"_"+lab_name);
      }

      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;
      if(pass==0)
      {
         n.f0.accept(this, argu);

         String lab_name=n.f1.accept(this, argu).toString();

         new_block.label_jumps.add(lab_name);

         is_jump=true;
      }
      else
      {
         n.f0.accept(this, argu);
         String lab_name=n.f1.accept(this, argu).toString();
         System.out.println("JUMP "+new_fn.fn_label+"_"+lab_name);
      }
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Temp()
    * f2 -> IntegerLiteral()
    * f3 -> Temp()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
      if(pass==0)
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
      }
      else
      {
         n.f0.accept(this, argu);
         String reg1=n.f1.accept(this, argu).toString();
         String offset=n.f2.accept(this, argu).toString();
         reg_v=true;
         String reg2=n.f3.accept(this, argu).toString();
         reg_v=false;

         System.out.println("HSTORE "+reg1+" "+offset+" "+reg2);
      }

      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Temp()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
      if(pass==0)
      {

         n.f0.accept(this, argu);

         is_defined=true;
         n.f1.accept(this, argu);
         is_defined=false;

         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
      }
      else
      {
         n.f0.accept(this, argu);

         tb_stored=true;
         reg_v=true;
         String reg1=n.f1.accept(this, argu).toString();
         reg_v=false;
         tb_stored=false;

         String reg2=n.f2.accept(this, argu).toString();

         String offset=n.f3.accept(this, argu).toString();

         if(store_spilled)
         {
            store_spilled=false;
            System.out.println("HLOAD v1 "+reg2+" "+offset);
            System.out.println(reg1);

         }
         else
         {
            System.out.println("HLOAD "+reg1+" "+reg2+" "+offset);
         }

      }

      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
      if(pass==0)
      {
         n.f0.accept(this, argu);
         is_defined=true;
         n.f1.accept(this, argu);
         is_defined=false;
         n.f2.accept(this, argu);
      }
      else
      {
         n.f0.accept(this, argu);

         tb_stored=true;
         reg_v=true;
         String reg1=n.f1.accept(this, argu).toString();
         reg_v=false;
         tb_stored=false;

         String exp=n.f2.accept(this, argu).toString();

         if(store_spilled)
         {
            store_spilled=false;
            System.out.println("MOVE v1 "+exp);
            System.out.println(reg1);
         }
         else
         {
            System.out.println("MOVE "+reg1+" "+exp);
         }
      }

      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      if(pass==0)
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
      }
      else
      {
         n.f0.accept(this, argu);
         String sim_exp=n.f1.accept(this, argu).toString();
         System.out.print("PRINT"+" ");
		 System.out.println(sim_exp);
      }

      return _ret;
   }

   /**
    * f0 -> Call()
    *       | HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> SimpleExp()
    * f4 -> "END"
    */
   public R visit(StmtExp n, A argu) {
      R _ret=null;
      if(pass==0)
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);

         new_block.children.add(block_count);
         new_block= new block_info();
         new_block.block_number=block_count;
         block_count++;
         n.f3.accept(this, argu);
         new_fn.blocks.add(new_block);

         n.f4.accept(this, argu);
      }
      else
      {
         int init_ss;
         for(int i=0;i<8;i++)
         {
            System.out.println("ASTORE SPILLEDARG "+new_fn.stack_pointer+" s"+i);
            new_fn.stack_pointer++;
         }
         init_ss=new_fn.stack_pointer;

         for(int i=0;i<new_fn.args_count;i++)
         {
            if(i==4)
            break;
            if(new_fn.tmps.containsKey(i))
            {   tb_stored=true;
            String str_loc=get_temp(i);
            tb_stored=false;

            if(store_spilled)
            {
               System.out.println("MOVE v0 a"+i);
               System.out.println(str_loc);
            }
            else
            {
               System.out.println("MOVE "+str_loc+" a"+i);
            }}

         }
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         String ret=n.f3.accept(this, argu).toString();
         System.out.println("MOVE v0 "+ret);
         for(int i=7;i>=0;i--)
         {
            init_ss--;
            System.out.println("ALOAD s"+i+" SPILLEDARG "+init_ss);
         }
         new_fn.stack_pointer-=8;
         System.out.println("END");

         n.f4.accept(this, argu);

         if(new_fn.spilled_temps.size()>0)
         {
            System.out.println("//SPILLED");
         }
         else
         {
            if(debug)
            {
               System.out.println(new_fn.fn_label+"DONE");

               for(int i=0;i<10;i++)
               {
                  System.out.println("DEbug");
               }
            }
            System.out.println("//NOTSPILLED");
         }

         System.out.println();
      }

      return _ret;

   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    * f2 -> "("
    * f3 -> ( Temp() )*
    * f4 -> ")"
    */
   public R visit(Call n, A argu) {
      R _ret=null;

      if(pass==0)
      {
         new_fn.call_count++;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);

         cur_args_count=0;
         is_call=true;
         n.f3.accept(this, argu);
         is_call=false;

         if(new_fn.max_args_count<cur_args_count)
         new_fn.max_args_count=cur_args_count;

         n.f4.accept(this, argu);
      }
      else
      {
         int init_ss;
         for(int i=0;i<10;i++)
         {
            System.out.println("ASTORE SPILLEDARG "+new_fn.stack_pointer+" t"+i);
            new_fn.stack_pointer++;
         }
         init_ss=new_fn.stack_pointer;

		 n.f0.accept(this, argu);
         String callee=n.f1.accept(this, argu).toString();
         n.f2.accept(this, argu);

		 if(callee.charAt(0)=='v')
		 reg_v=!reg_v;

         cur_args_count=0;
         is_call=true;
         n.f3.accept(this, argu);
         is_call=false;

		 if(callee.charAt(0)=='v')
		 reg_v=!reg_v;
         n.f4.accept(this, argu);

         System.out.println("CALL "+callee);
         for(int i=9;i>=0;i--)
         {
            init_ss--;
            System.out.println("ALOAD t"+i+" SPILLEDARG "+init_ss);
         }
         new_fn.stack_pointer-=10;

         _ret=(R)"v0";
      }
      if(debug)
         {
            System.out.println(new_fn.fn_label+"DONE");

            for(int i=0;i<10;i++)
            {
               System.out.println("DEbug");
            }
         }
      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n, A argu) {
      R _ret=null;

      n.f0.accept(this, argu);

      if(pass==1)
      {
         String sim_exp=n.f1.accept(this, argu).toString();
		 String ret="HALLOCATE v0";
		 _ret=(R)ret;

         if(sim_exp.charAt(0)<='9'&& sim_exp.charAt(0)>='0')
         {
			   System.out.print("MOVE v1 ");
            System.out.println(sim_exp);
            System.out.println("MOVE v0 PLUS v1 4");
         }
         else
         {
			System.out.print("MOVE v0 PLUS ");
            System.out.print(sim_exp);
			System.out.println(" 4");
         }

      }
      else
      {
         n.f1.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Temp()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n, A argu) {
      R _ret=null;
      if(pass==1)
      {
		 String ret=n.f0.accept(this, argu).toString();
		 ret = ret + " ";
         ret = ret+n.f1.accept(this, argu).toString();
		 ret = ret + " ";
         ret = ret + n.f2.accept(this, argu).toString();
         _ret=(R)ret;
      }
      else
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n, A argu) {
      R _ret=null;
      _ret=n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Temp()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n, A argu) {
      R _ret=null;
      _ret=n.f0.accept(this, argu);
      // if(pass==1)
      // // System.out.println(_ret);
      return _ret;
   }

   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
   public R visit(Temp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      Integer temp_val=Integer.parseInt(n.f1.accept(this, argu).toString());
      if(pass==0)
      {
         if(is_call)
         {
            cur_args_count++;
         }
         if(is_defined)
         {
            new_block.defined.add(temp_val);
         }
         else
         {
            new_block.used.add(temp_val);
         }

      }
      else
      {
         // System.out.println("TEMP:"+temp_val);
         String final_reg=get_temp(temp_val);
         _ret=(R)final_reg;
         if(is_call)
         {

            if(cur_args_count>3)
            {
               System.out.print("PASSARG ");
               System.out.print(cur_args_count-3);
               System.out.println(" "+final_reg);
            }
            else
            {
               System.out.print("MOVE a");
               System.out.print(cur_args_count);
               System.out.println(" "+final_reg);
            }
            cur_args_count++;

         }

      }

      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      _ret=n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      R _ret=null;
      _ret=n.f0.accept(this, argu);

      if(is_fn_label)
      {
         if(pass==0)
         {
            fn_label_list.put(_ret.toString(),block_count);
         }

      }
      else if(is_gen_label)
      {
         if(pass==0)
         {
            new_fn.label_map.put(_ret.toString(),block_count);
         }
         else
         {
            System.out.println(new_fn.fn_label+"_"+_ret );
         }
      }



      return _ret;
   }

}

class tmp_info
{
   int index,start,end,val;
   String register="";
   boolean is_spilled=true;
   int reg_ind=-1;

   public tmp_info(int s1,int e1,int v,int ind)
   {
	start=s1;
	end=e1;
	val=v;
	index=ind;
   }
}

class block_info
{
   int block_number;
   HashSet<Integer> defined =new HashSet<>();
   HashSet<Integer> used =new HashSet<>();
   HashSet<Integer> in =new HashSet<>();
   HashSet<Integer> out =new HashSet<>();
   ArrayList<Integer> children =new ArrayList<>();
   ArrayList<String> label_jumps = new ArrayList<>();
}

class fn_info
{
   String fn_label="";
   int args_count;
   int stack_space = 0,stack_pointer = 0;
   int max_args_count = 0;
   int call_count=0;

   HashMap<String,Integer> label_map = new HashMap<>();
   HashMap<Integer,tmp_info> tmps = new HashMap<>();
   ArrayList<Integer>ios_tmps= new ArrayList<>();
   ArrayList<block_info> blocks = new ArrayList<>();
   ArrayList<Integer>spilled_temps = new ArrayList<>();

}

class sort_start implements Comparator<Integer>
{
   fn_info cur_fn;
   public sort_start(fn_info this_fn)
   {
      cur_fn=this_fn;
   }
   @Override
   public int compare(Integer temp1,Integer temp2)
   {
      tmp_info t1=cur_fn.tmps.get(temp1);
      tmp_info t2=cur_fn.tmps.get(temp2);
      if(t1.start != t2.start)
      {
         if(t1.start < t2.start)
         return -1;
         else
         return 1;
      }
      else
      {
         if(t1.end < t2.end)
         return -1;
         else
         return 1;
      }
   }
}

class sort_end implements Comparator<Integer>
{
   fn_info cur_fn;
   public sort_end(fn_info this_fn)
   {
      cur_fn=this_fn;
   }
   @Override
   public int compare(Integer temp1,Integer temp2)
   {
      tmp_info t1=cur_fn.tmps.get(temp1);
      tmp_info t2=cur_fn.tmps.get(temp2);
      if(t1.end != t2.end)
      {
         if(t1.end < t2.end)
         return -1;
         else
         return 1;
      }
      else
      {
         if(t1.start < t2.start)
         return -1;
         else
         return 1;
      }
   }
}
